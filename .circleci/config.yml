# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.8
    resource_class: small
    working_directory: ~/repo

commands:

  setup:
    steps:
      - run:
          name: Setup custom environment variables
          command: |
            echo "export GNS3_VERSION=\"${CIRCLE_TAG:-"v2.2.27"}\"" >> $BASH_ENV
            echo "export GNS3_NUMBER=\`echo \$GNS3_VERSION | sed \"s/^v//\"\`" >> $BASH_ENV

      - run:
          name: Install Python dependencies
          command: |
            python3 -m venv env
            source env/bin/activate
            pip install packet-python

      - run:
          name: Get builder device
          no_output_timeout: 20m
          command: |
            source env/bin/activate
            DEVICE_IP=`python3 .circleci/device.py ${EQUINIX_TOKEN} get "${EQUINIX_PROJECT}" ${DEVICE_TYPE} ${METRO}`
            echo "export DEVICE_IP=\"$DEVICE_IP\"" >> $BASH_ENV
            echo "Obtained device on $DEVICE_IP"
            ssh-keyscan -H ${DEVICE_IP} >> ~/.ssh/known_hosts

      - run:
          name: Clone repository on device
          command: |
            ssh root@${DEVICE_IP} "
              set -e
              if [ ! -d "~/gns3-vm" ]
              then
                git clone https://github.com/GNS3/gns3-vm.git
                cd gns3-vm
                git checkout noble-stable
              fi
            "

  finalize:
    steps:
      - run:
          name: Gather artifacts from device
          when: always
          command: |
            mkdir artifacts
            scp root@${DEVICE_IP}:"gns3-vm/GNS3*.zip" artifacts

      - run:
          name: Destroy device
          when: always
          command: |
            source env/bin/activate
            python3 .circleci/device.py ${EQUINIX_TOKEN} destroy "${EQUINIX_PROJECT}" ${DEVICE_TYPE} ${METRO}

      - run:
          name: Generate SHA256 checksums
          when: always
          command: |
            cd artifacts
            for file in *.zip
            do
              sha256sum "$file" > "$file.sha256"
              cat "$file.sha256"
              sha256sum -c "$file.sha256"
            done
            ls -l
            cd -

      - run:
          name: Deploying on Github and SourceForge
          when: always
          command: |
            source env/bin/activate
            python3 -m pip install -U pip
            git clone git@github.com:GNS3/gns3-build.git
            cd gns3-build
            python3 -m pip install -r requirements.txt
            cd ..

            echo "Deploying version ${CIRCLE_TAG} on GitHub"
            for file in artifacts/GNS3.VM.*.{zip,sha256}
            do
              python3 gns3-build/upload.py ${CIRCLE_TAG} $file
            done

            echo "Deploying version ${CIRCLE_TAG} on SourceForge"
            ssh-keyscan -H frs.sourceforge.net >> ~/.ssh/known_hosts
            scp artifacts/GNS3.VM.* gns3build@frs.sourceforge.net:"/home/frs/project/gns-3/Releases/${CIRCLE_TAG}/"

      - store_artifacts:
          path: artifacts
          destination: artifacts

jobs:
  x86-build:
    executor: docker-executor

    environment:
        DEVICE_TYPE: m3.small.x86
        METRO: da # Dallas

    steps:
      - checkout
      - setup

      - run:
          name: Install VirtualBox
          command: |
            ssh root@${DEVICE_IP} "
              set -e
              apt update
              apt -y install linux-headers-\$(uname -r) zip unzip git
              wget -q -O- http://download.virtualbox.org/virtualbox/debian/oracle_vbox_2016.asc | apt-key add -
              wget -q -O- http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc | apt-key add -
              apt-add-repository \"deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian \$(lsb_release -cs) contrib\"
              apt update
              apt -y install virtualbox-6.1
            "

      - run:
          name: Install VMWare
          command: |
            echo "
              set -e

              if [ ! -f "/tmp/VMware-Workstation-16.2.5-20904516.x86_64.bundle.tar" ]
              then
                wget https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.5/20904516/linux/core/VMware-Workstation-16.2.5-20904516.x86_64.bundle.tar -O /tmp/VMWare.bundle.tar
                tar xvvf /tmp/VMWare.bundle.tar -C /tmp/
              fi

              chmod a+x /tmp/VMware-Workstation-16.2.5-20904516.x86_64.bundle

              /tmp/VMware-Workstation-16.2.5-20904516.x86_64.bundle --eulas-agreed --required --console
              /usr/lib/vmware/bin/vmware-vmx --new-sn ${VMWARE_16_SERIAL}
              /etc/init.d/vmware restart
            " > script.sh
            scp script.sh root@${DEVICE_IP}:
            ssh root@${DEVICE_IP} "bash script.sh"

      - run:
          name: Install Packer for amd64 & Qemu
          command: |
            ssh root@${DEVICE_IP} "
              set -e

              if [ ! -f "/tmp/packer.zip" ]
              then
                wget https://releases.hashicorp.com/packer/1.8.3/packer_1.8.3_linux_amd64.zip -O /tmp/packer.zip
              fi

              unzip -o /tmp/packer.zip -d /usr/local/bin/
              apt install -y genisoimage qemu-utils qemu-system-x86 qemu-kvm
            "

      - run:
          name: Release VMWare VM
          command: |
            ssh root@${DEVICE_IP} "
              set -e

              cd gns3-vm

              if [ ! -e \"GNS3.VM.VMware.Workstation.${GNS3_NUMBER}.zip\" ];
              then
                ./build_base_vm.sh
                ./release_vmware.sh ${GNS3_VERSION} GNS3VM.Base.$(cat version).zip
              fi
            "

      - run:
          name: Release VirtualBox VM
          command: |
            ssh root@${DEVICE_IP} "
              set -e

              cd gns3-vm

              if [ ! -e \"GNS3.VM.VirtualBox.${GNS3_NUMBER}.zip\" ];
              then
                ./release_virtualbox.sh ${GNS3_VERSION} GNS3.VM.VMware.Workstation.${GNS3_NUMBER}.zip
              fi
            "

      - run:
          name: Release Hyper-V VM
          command: |
            ssh root@${DEVICE_IP} "
              set -e

              cd gns3-vm

              if [ ! -e \"GNS3.VM.Hyper-V.${GNS3_NUMBER}.zip\" ];
              then
                ./release_hyperv.sh ${GNS3_VERSION} GNS3.VM.VirtualBox.${GNS3_NUMBER}.zip
              fi
            "

#      - run:
#          name: Release KVM VM
#          command: |
#            ssh root@${DEVICE_IP} "
#              set -e
#
#              cd gns3-vm
#
#              if [ ! -e \"GNS3.VM.KVM.${GNS3_NUMBER}.zip\" ];
#              then
#                ./release_kvm.sh ${GNS3_VERSION}
#              fi
#            "

      - run:
          name: Release VMWare ESXI VM
          command: |
            ssh root@${DEVICE_IP} "
              set -e

              cd gns3-vm

              cp \"GNS3.VM.VMware.Workstation.${GNS3_NUMBER}.zip\" /tmp/GNS3VM.VMware.${GNS3_NUMBER}.zip

              if [ ! -e \"GNS3.VM.VMware.ESXI.${GNS3_NUMBER}.zip\" ];
              then
                ./release_vmware_esxi.sh ${GNS3_VERSION}
              fi
            "

      - finalize

  arm64-build:
    executor: docker-executor

    environment:
        DEVICE_TYPE: c3.large.arm
        METRO: da # Dallas

    steps:
      - checkout
      - setup

      - run:
          name: Install Packer for ARM64
          command: |
            ssh root@${DEVICE_IP} "
              set -e

              if [ ! -f "/tmp/packer.zip" ]
              then
                apt update && apt install -y zip
                wget https://releases.hashicorp.com/packer/1.0.4/packer_1.0.4_linux_arm64.zip -O /tmp/packer.zip
              fi

              unzip -o /tmp/packer.zip -d /usr/local/bin/
            "

      - run:
          name: Release QEMU ARM64 VM
          no_output_timeout: 20m
          command: |
            ssh root@${DEVICE_IP} "
              set -e

              cd gns3-vm

              if [ ! -e \"GNS3.VM.ARM64.${GNS3_NUMBER}.zip\" ];
              then
                apt install -y qemu-utils qemu-system-arm qemu-efi-aarch64
                ./release_qemu_arm64.sh ${GNS3_VERSION}
              fi
            "

      - finalize

workflows:
  build_only_on_tag:
    jobs:
      - x86-build:
          filters:
            tags:
              only: /v3.*/
            branches:
              ignore: /.*/
#      - arm64-build:
#          filters:
#            tags:
#              only: /v3.*/
#            branches:
#              ignore: /.*/
